{"version":3,"file":"js/payoneer-checkout.js","mappings":"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","sources":["webpack://payoneer-embedded-payment/./resources/js/payoneer-checkout.js"],"sourcesContent":["document.addEventListener(\n  'DOMContentLoaded',\n  function () {\n    if (typeof checkoutList === 'undefined') {\n      return;\n    }\n\n    const checkoutForm = jQuery('form.checkout')\n    let widgetContainer = [];\n\n    function hasWidgetContainer() {\n      widgetContainer = jQuery('#' + PayoneerData.paymentFieldsContainerId);\n      return widgetContainer.length > 0;\n    }\n\n    function isPayForOrder() {\n      return PayoneerData.isPayForOrder === '1';\n    }\n\n    function isWidgetInitialized() {\n      const widgetContainer = jQuery('#' + PayoneerData.paymentFieldsContainerId + ' .op-payment-widget-container');\n      if (!widgetContainer.length) {\n        return false;\n      }\n      // Now we check if the widget is displaying some errors instead of payment fields\n      const widgetErrors = jQuery('.GLOBAL_ERROR', widgetContainer);\n      return widgetErrors.length === 0;\n    }\n\n    function debounce(func, timeout = 300) {\n      let timer;\n      return (...args) => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          func.apply(this, args);\n        }, timeout);\n      };\n    }\n\n    function isPayoneerGatewaySelected() {\n      var selectedPaymentMethod = jQuery('.woocommerce-checkout input[name=\"payment_method\"]:checked').attr('id');\n      return selectedPaymentMethod === 'payment_method_payoneer-checkout'\n    }\n\n    function showWooCommercePlaceOrderButton() {\n      jQuery('#payoneer_place_order').prop(\"disabled\", true).hide();\n      jQuery('#place_order').prop(\"disabled\", false).show();\n    }\n\n    function showPayoneerPlaceOrderButton() {\n      jQuery('#place_order').prop(\"disabled\", true).hide();\n      jQuery('#payoneer_place_order').prop(\"disabled\", false).show();\n    }\n\n    function togglePlaceOrderButtons() {\n      isPayoneerGatewaySelected() ? showPayoneerPlaceOrderButton() : showWooCommercePlaceOrderButton();\n    }\n\n    function submitOrderPayViaAjax(success, error) {\n      jQuery.ajax({\n        type: 'POST',\n        url: wc_checkout_params.ajax_url,\n        xhrFields: {\n          // This is important. We need the session cookie to access the LIST in the back-end\n          withCredentials: true\n        },\n        dataType: 'json',\n        data: {\n          action: 'payoneer_order_pay',\n          fields: jQuery('#order_review').serialize(),\n          params: (new URL(document.location)).searchParams.toString()\n        },\n        success: function (data) {\n          success(data)\n        },\n        error: function (data, textStatus, errorThrown) {\n          error(data)\n          /**\n           * Reloading enables us to see error messages added via wc_add_notice()\n           */\n          window.location.reload();\n        }\n      })\n    }\n\n    /**\n     * We need to hook into global events emitted by WooCommerce for our charge to execute.\n     * This is only supposed to happen once, but we need to know if it succeeded or errored out.\n     * Since we don't want to leave dangling event handlers executing unneeded logic after finishing,\n     * The callbacks are guarded by a common 'hasRun' bool, which ensures that only one of the three\n     * routes can be taken.\n     *\n     * @param resolve\n     * @param onSuccess optionally execute a callback after the order has been validated\n     * @param onError optionally execute a callback after the order failed to validate\n     */\n    function createPromiseResolver(resolve, onSuccess, onError) {\n      let hasRun = false;\n      checkoutForm.one('checkout_place_order_success', function (event, result) {\n        if (hasRun) {\n          return;\n        }\n        hasRun = true\n        resolve(true)\n        onSuccess && onSuccess()\n        return false;\n      });\n      jQuery(document.body).one('checkout_error', function (event, result) {\n        if (hasRun) {\n          return;\n        }\n        hasRun = true\n        onError && onError()\n        resolve(false)\n      });\n      /**\n       * This is just a safety net to release the checkout form eventually if something fails\n       */\n      window.setTimeout(function () {\n        if (hasRun) {\n          return;\n        }\n        hasRun = true\n        onError && onError()\n        resolve(false)\n      }, 20000);\n    }\n\n    /**\n     * Repeated calls to 'checkoutList' can result in missing iFrames for reasons beyond our control\n     * To be on the safe side, we create a debounced version of the actual init logic\n     * so it can only run once every 300ms.\n     * (Manual testing showed it happens if called twice with a delay <100ms)\n     * @type {(function(...[*]): void)|*}\n     */\n    const initWidget = debounce(function () {\n      /**\n       * Getting this data and initializing payment widget should happen everytime on updated_checkout event.\n       * This is because LIST session might be replaced with a new one because of expiring or other reasons.\n       * On each updated_checkout event the field containing identifier is updated with WC fragments.\n       * So, by getting LIST identifier and re-initializing payment widget each time we can be sure we\n       * have the newest session id.\n       */\n\n      const listIdContainer = jQuery('#' + PayoneerData.listUrlContainerId);\n      const listUrl = listIdContainer.val();\n      // The checkout form has differing selectors on regular checkout and 'pay-for-order'\n      const formSelector = PayoneerData.isPayForOrder === '0' ? 'form.checkout' : '#order_review'\n\n      const payload = {\n        listUrl: listUrl,\n        fullPageLoading: false,\n        payButton: PayoneerData.payButtonId,\n        widgetCssUrl: PayoneerData.widgetCssUrl,\n        cssUrl: PayoneerData.cssUrl,\n        onBeforeCharge: async () => {\n          const chargeAttempt = new Promise((resolve) => {\n            let hostedModeFlag = jQuery('input[name=' + PayoneerData.hostedModeOverrideFlag + ']');\n            hostedModeFlag.prop('disabled', true)\n            if (PayoneerData.isPayForOrder) {\n              submitOrderPayViaAjax(\n                () => resolve(true),\n                () => resolve(false)\n              )\n            } else {\n              createPromiseResolver(resolve,null,function(){\n                hostedModeFlag.prop('disabled', false)\n              })\n              jQuery(formSelector).submit();\n            }\n          })\n\n          return await chargeAttempt;\n        },\n        onBeforeServerError: async (errorData) => {\n          const serverError = new Promise((resolve) => {\n            if(isPayForOrder()) {\n              const url = new URL(document.location);\n              url.searchParams.set(PayoneerData.payOrderErrorFlag, true);\n              window.location.href = url.toString();\n              resolve(false);\n            }\n\n            let onErrorFlag = jQuery('input[name=' + PayoneerData.onErrorRefreshFragmentFlag + ']');\n            onErrorFlag.prop('value', true)\n            console.log('onBeforeServerError', errorData)\n            // Clear the widget container so that we re-init after fragment update\n            jQuery('#' + PayoneerData.paymentFieldsContainerId).empty();\n            jQuery(document.body).trigger('update_checkout');\n            resolve(false)\n          })\n\n          return await serverError;\n        }\n      };\n      if (!listUrl || listUrl === '') { // Prevent unnecessary init with empty LIST Url\n        return;\n      }\n      destroyWidget();\n      console.log('Initializing Payoneer payment widget', payload);\n      widgetContainer.empty().checkoutList(payload);\n    });\n\n    /**\n     * Cannot use native event listener for events dispatched by jQuery\n     * https://github.com/jquery/jquery/issues/3347\n     */\n    jQuery(document.body).on('payment_method_selected', function () {\n      isPayoneerGatewaySelected() && hasWidgetContainer() && !isWidgetInitialized() && initWidget();\n      togglePlaceOrderButtons();\n    });\n\n    jQuery(document.body).on('updated_checkout', function () {\n      hasWidgetContainer() && !isWidgetInitialized() && isPayoneerGatewaySelected() && initWidget();\n      togglePlaceOrderButtons();\n    });\n\n    jQuery('#payoneer_place_order').on('click', function (e) {\n      e.preventDefault();\n    })\n\n    // No fragment update on 'order-pay'. So we manually initialize our widget\n    if (isPayForOrder() && isPayoneerGatewaySelected() && hasWidgetContainer() && !isWidgetInitialized()) {\n      initWidget();\n    }\n\n    /**\n     * To be extra sure that our button does not trigger the native form submission,\n     * we preventDefault() explicitly\n     */\n    jQuery('#payoneer_place_order').on('click', function (e) {\n      e.preventDefault();\n    })\n    togglePlaceOrderButtons();\n\n  },\n  false,\n);\n"],"names":["document","addEventListener","checkoutList","checkoutForm","jQuery","widgetContainer","hasWidgetContainer","PayoneerData","paymentFieldsContainerId","length","isPayForOrder","isWidgetInitialized","isPayoneerGatewaySelected","attr","togglePlaceOrderButtons","prop","hide","show","initWidget","func","timeout","timer","args","clearTimeout","setTimeout","apply","this","debounce","listUrl","listUrlContainerId","val","formSelector","payload","fullPageLoading","payButton","payButtonId","widgetCssUrl","cssUrl","onBeforeCharge","async","chargeAttempt","Promise","resolve","hostedModeFlag","hostedModeOverrideFlag","success","error","ajax","type","url","wc_checkout_params","ajax_url","xhrFields","withCredentials","dataType","data","action","fields","serialize","params","URL","location","searchParams","toString","textStatus","errorThrown","window","reload","onSuccess","onError","hasRun","one","event","result","body","createPromiseResolver","submit","onBeforeServerError","serverError","set","payOrderErrorFlag","href","onErrorRefreshFragmentFlag","console","log","errorData","empty","trigger","destroyWidget","on","e","preventDefault"],"sourceRoot":""}